#!/bin/bash

verify_exit() {
  EXIT_CODE=$?

  if [[ "$EXIT_CODE" != 0 ]]; then
    printf "\n\033[41mCOMMIT FAILED\033[0m\n"
    exit $EXIT_CODE
  fi
}

# Go to the project root directory
cd "$(git rev-parse --show-toplevel)"

# CLIENT

STAGED_FILES=($(git diff --cached --name-only --diff-filter=ACM | grep -E 'client/.*\.(ts|tsx)$' | sed -E 's/client\///'))

if [[ "$STAGED_FILES" != "" ]]; then
  # AUTOMATED TESTS
  echo -e "Running all /client test suites..."

  cd client
  npx jest
  verify_exit

  # CLIENT BUILD
  npx next build
  verify_exit

  # ESLINT
  ESLINT="node_modules/.bin/eslint"

  if [[ ! -x "$ESLINT" ]]; then
    printf "\033[41mPlease install ESlint in /client\033[0m\n"
    (exit 1) # set exit code
    verify_exit
  else
    ESLINT="node_modules/.bin/eslint"
    echo -e "Linting these files in the client directory:\n"

    for file in ${STAGED_FILES[@]}; do
      echo $file
    done

    $ESLINT --fix "${STAGED_FILES[@]}"
    verify_exit

    # Re-add files since they may have been changed
    echo 'Readding /client files'
    git add "${STAGED_FILES[@]}"
    cd ..
  fi
fi

# SERVER

STAGED_FILES=($(git diff --cached --name-only --diff-filter=ACM . | grep -E 'server/.*\.(ts|tsx)$' | sed -E 's/server\///'))

if [[ "$STAGED_FILES" != "" ]]; then
  # AUTOMATED TESTS
  echo -e "Running all /server test suites..."

  cd server
  npx jest
  verify_exit

  # ESLINT
  ESLINT="node_modules/.bin/eslint"

  if [[ ! -x "$ESLINT" ]]; then
    printf "\033[41mPlease install ESlint in /server\033[0m\n"
    (exit 1) # set exit code
    verify_exit
  else
    ESLINT="node_modules/.bin/eslint"
    echo -e "Linting these files in the server directory:\n"

    for file in ${STAGED_FILES[@]}; do
      echo $file
    done

    $ESLINT --fix "${STAGED_FILES[@]}"
    verify_exit

    # Re-add files since they may have been changed
    echo 'Readding /server files'
    git add "${STAGED_FILES[@]}"
    cd ..
  fi
fi

printf "\n\033[42mCOMMIT SUCCEEDED\033[0m\n"