{
  "Mongoose Model": {
    "scope": "typescript",
    "prefix": "monmod",
    "body": [
      "import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';",
      "import { HydratedDocument } from 'mongoose';",
      "import { I${1:Object} } from '@sh/types';",
      "",
      "@Schema({ timestamps: true })",
      "export class ${1:Object} implements I${1:Object} {",
      "\t@Prop({ required: true })",
      "\t$0",
      "}",
      "",
      "export type ${1:Object}Document = HydratedDocument<${1:Object}>;",
      "",
      "export const ${1:Object}Schema = SchemaFactory.createForClass(${1:Object});"
    ],
    "description": "Create Mongoose model"
  },
  "Mongoose Subschema": {
    "scope": "typescript",
    "prefix": "monsubschema",
    "body": [
      "@Schema({ _id: false })",
      "class ${1:Object} implements I${1:Object} {",
      "\t@Prop()",
      "\t$0",
      "}",
      "",
      "const ${1:Object}Schema = SchemaFactory.createForClass(${1:Object});"
    ]
  },
  "Service Injection": {
    "scope": "typescript",
    "prefix": "inject",
    "body": "constructor(@InjectModel('${1:Object}') private readonly model: Model<${1:Object}>) {}$0"
  },
  "Create DTO": {
    "scope": "typescript",
    "prefix": "createdto",
    "body": [
      "import { IsString } from 'class-validator';",
      "import { I${1:Object} } from '@sh/types';",
      "",
      "export class Create${1:Object}Dto implements I${1:Object} {",
      "\t$0",
      "}"
    ]
  },
  "Pretty JSON output": {
    "prefix": "jsonstringify",
    "body": "console.log(JSON.stringify($0, null, 2))"
  }
}
